<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TestEvent" Id="{1f6f0448-1ae3-4068-b11e-400de0fbbc2c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TestEvent EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[event_erstellen();
//file_logger_testen();
after_initialisation_alarm_is_not_raised();
after_raising_an_alarm_the_alarm_is_raised();
clear_alarm();
add_multiple_events();]]></ST>
    </Implementation>
    <Method Name="add_multiple_events" Id="{e9dc6e7f-11a1-4018-94b6-f52294564527}">
      <Declaration><![CDATA[METHOD add_multiple_events
VAR_INST
  sut: MultipleEventTestsystem;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Add multiple events');

sut.event1.alarm();
sut.event2.warning();
sut.event3.alarm();
AssertTrue(sut.event1.alarm_raised, 'Event 1');
AssertFalse(sut.event2.alarm_raised, 'Event 2');
AssertTrue(sut.event3.alarm_raised, 'Event 3');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="after_initialisation_alarm_is_not_raised" Id="{a58568b8-cfac-4930-b4ec-3c7531d956e8}">
      <Declaration><![CDATA[METHOD after_initialisation_alarm_is_not_raised
VAR_INPUT
END_VAR
VAR_INST
  sut: EventTestsystem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Alarm is not raised after initialisation');

AssertFalse(sut.event.alarm_raised, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="after_raising_an_alarm_the_alarm_is_raised" Id="{3e51c88a-603f-40de-b89e-e09310467482}">
      <Declaration><![CDATA[METHOD after_raising_an_alarm_the_alarm_is_raised
VAR_INPUT
END_VAR
VAR_INST
  sut: EventTestsystem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('After raising an alarm the alarm is raised');

sut.event.alarm();
AssertTrue(sut.event.alarm_raised, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="clear_alarm" Id="{79efaec0-0122-48a3-8419-dd3612e1e2ef}">
      <Declaration><![CDATA[METHOD clear_alarm
VAR_INPUT
END_VAR
VAR_INST
  sut: EventTestsystem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Clear alarm');

sut.event.alarm();
sut.event.clear_alarm();
AssertFalse(sut.event.alarm_raised, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="event_erstellen" Id="{84e9d7a6-3a39-48d5-8e25-b4781b9bf70a}">
      <Declaration><![CDATA[METHOD event_erstellen
VAR_INPUT
END_VAR
VAR_INST
  sut: EventTestsystem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('event_erstellen');

sut.event.message := 'Test';
AssertEquals_STRING('Test', sut.event.message, 'Event not properly created');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="file_logger_testen" Id="{21fea1f4-e348-4ccc-a848-51272e2d54b0}">
      <Declaration><![CDATA[METHOD file_logger_testen
VAR_INPUT
END_VAR
VAR_INST
  sut: EventTestsystem;
  file_logger: FileLogger;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('file_logger_testen');

file_logger.path := 'c:\';
sut.runner.add_logger(file_logger);
sut.event.message := 'Test';
sut.event.alarm();

//sut.runner.save_logger(execute:=TRUE);

//IF sut.runner.saving_logger_done() THEN
  TEST_FINISHED();
//END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>