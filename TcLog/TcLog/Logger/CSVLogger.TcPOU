<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="CSVLogger" Id="{eddd5bf2-9f8b-4014-b1a1-2b9514f6af17}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CSVLogger IMPLEMENTS EventLogger
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
  _path: STRING(255);
  filename: STRING(255);
  file: TcExt.FileMemory := (mode_write := Tc2_System.FOPEN_MODEAPPEND OR Tc2_System.FOPEN_MODETEXT);
  _done: BOOL;
  _level: EventLevel;
  act_time: TIMESTRUCT;
  format_string: FB_FormatSTring;
  message_queue: FB_FrameFifo;
  state_number: INT;
  row: STRING(255);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="create_row" Id="{62ac12fa-3bef-45d6-b92a-39ca0590c04e}">
      <Declaration><![CDATA[METHOD INTERNAL create_row
VAR_IN_OUT
  ev: EventMessage;
END_VAR
VAR
  timestr: STRING(255);
  datestr: STRING(255);
  dtstr: STRING(255);
  clearedstr: STRING(255);
  levelstr: STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ev.cleared THEN
  TIMESTRUCT_TO_DATESTR(
    ts:=ev.timestamp_cleared,
    outputstr:=datestr);
  TIMESTRUCT_TO_TIMESTR(
    ts:=ev.timestamp_cleared,
    outputstr:=timestr);
ELSE
  TIMESTRUCT_TO_DATESTR(
    ts:=ev.timestamp_raised,
    outputstr:=datestr);
  TIMESTRUCT_TO_TIMESTR(
    ts:=ev.timestamp_raised,
    outputstr:=timestr);
END_IF
dtstr := CONCAT(datestr, CONCAT(' ', timestr));
clearedstr := TO_STRING(ev.cleared);
levelstr := TO_STRING(ev.level);

format_string(
  sFormat:='%s,%s,%s,%s,%s$R',
  arg1:=F_STRING(dtstr),
  arg2:=F_STRING(clearedstr),
  arg3:=F_STRING(levelstr),
  arg4:=F_STRING(ev.path),
  arg5:=F_STRING(ev.message),
  sOut=>row
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="get_timestamped_filename" Id="{fd365ee7-137c-43d5-b097-a6c91d56c64b}">
      <Declaration><![CDATA[METHOD PRIVATE get_timestamped_filename
VAR_IN_OUT
  filename: STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TIMESTRUCT_TO_DATESTR(
  ts:=act_time,
  outputstr:=filename);
format_string(
  sFormat:='log_%s.csv',
  arg1:=F_STRING(filename),
  sOut=>filename);]]></ST>
      </Implementation>
    </Method>
    <Property Name="level" Id="{ab6b9969-76e1-4879-b617-99481726f092}">
      <Declaration><![CDATA[PROPERTY PUBLIC level : EventLevel]]></Declaration>
      <Get Name="Get" Id="{5ab1af13-9930-49f3-9811-710132aa1fb1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[level := _level;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cf7d265b-a08f-46d3-959d-33b6de9e6222}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_level := level;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="path" Id="{8ad77a76-a7ae-4211-a029-62cbfb7f3a1a}">
      <Declaration><![CDATA[PROPERTY PUBLIC path : STRING(255)]]></Declaration>
      <Get Name="Get" Id="{32fab473-3ae0-4d2e-b9ac-c6915164202f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[path := _path;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b4db1cae-d219-49b1-923d-846a377b7031}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_path := path;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="run" Id="{90c25d9f-9ec4-40ba-a160-c50bc84f515f}">
      <Declaration><![CDATA[METHOD run
VAR_INPUT
  act_time: TIMESTRUCT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.act_time := act_time;

save();]]></ST>
      </Implementation>
    </Method>
    <Method Name="save" Id="{501c7d54-f5c2-48f2-862f-f63db1339f45}">
      <Declaration><![CDATA[METHOD PRIVATE save
VAR
  done: BOOL;
  error_id: DWORD;
  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE state_number OF
0:
  message_queue.RemoveHead();
  IF message_queue.bOk THEN
    get_timestamped_filename(filename);
    file.path := CONCAT(path, filename);
    file.write(
      start:=FALSE,
      data_ptr:=ADR(message_queue.sGet),
      data_size:=TO_UDINT(LEN(message_queue.sGet))
    );
    state_number := state_number + 10;
	END_IF
10:
  file.write(
    start:=TRUE,
    data_ptr:=ADR(message_queue.sGet),
    data_size:=TO_UDINT(LEN(message_queue.sGet)),
    done=>done,
    error_id=>error_id
  );
  state_number := state_number + 10;
20:
  file.write(
    start:=FALSE,
    data_ptr:=ADR(message_queue.sGet),
    data_size:=TO_UDINT(LEN(message_queue.sGet)),
    done=>done,
    error_id=>error_id
  );
  
  IF done THEN
    state_number := 0;
	END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="submit_event_message" Id="{4532367b-994f-48dd-829f-58c767e7db29}">
      <Declaration><![CDATA[METHOD submit_event_message
VAR_IN_OUT
	ev: EventMessage;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ev.level >= level THEN
  message_queue.bLog := FALSE;
  message_queue.sPrefix := 'CSVLogger::';
  create_row(ev);
  message_queue.sPut := row;
  message_queue.AddTail();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>