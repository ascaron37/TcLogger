<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TestADSLogger" Id="{e126a8bd-dc53-47fb-b987-2c50fb609a8b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TestADSLogger EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[submit_info();
submit_warning();
submit_error();
submit_alarm();
change_default_level_to_warning_and_submit_info();
change_default_level_to_warning_and_submit_error();
create_event_with_a_parameter();
create_runner_message_with_a_parameter();
do_not_output_the_same_message_multiple_cycles_after_each_other();]]></ST>
    </Implementation>
    <Method Name="change_default_level_to_warning_and_submit_error" Id="{fde893c3-5a5b-4fdb-ab58-28f4712e9db3}">
      <Declaration><![CDATA[METHOD change_default_level_to_warning_and_submit_error
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Change default level to warning and submit error');

sut.logging.add_logger(sut.logger);
sut.logger.level := EventLevel.WARNING;
sut.event.message := 'Default level warning';
sut.event.error();
cut_output := RIGHT(sut.logger.formatted_output, 31);

AssertEquals_DWORD(ADSLOG_MSGTYPE_ERROR, sut.logger.mask, '');
AssertEquals_STRING(' | Error: ', sut.logger.prefix, '');
AssertEquals_STRING(' | Error: Default level warning', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="change_default_level_to_warning_and_submit_info" Id="{559af52a-7fea-4e0d-91b3-752a3aa7dcc3}">
      <Declaration><![CDATA[METHOD change_default_level_to_warning_and_submit_info
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Change default level to warning and submit info');

sut.logging.add_logger(sut.logger);
sut.logger.level := EventLevel.WARNING;
sut.event.message := 'Default level warning';
sut.event.info();

AssertEquals_DWORD(0, sut.logger.mask, '');
AssertEquals_STRING('', sut.logger.prefix, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="create_event_with_a_parameter" Id="{220a2117-cff1-4bcc-9fe0-a73e4a8b7629}">
      <Declaration><![CDATA[METHOD create_event_with_a_parameter
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  parameter: INT;
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Create event with a parameter');

sut.logging.add_logger(sut.logger);
sut.event.message := 'Test %d';
parameter := 123;
sut.event.parameter := F_INT(parameter);
sut.event.error();
cut_output := RIGHT(sut.logger.formatted_output, 18);

AssertEquals_DWORD(ADSLOG_MSGTYPE_ERROR, sut.logger.mask, '');
AssertEquals_STRING(' | Error: ', sut.logger.prefix, '');
AssertEquals_STRING(' | Error: Test 123', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="create_runner_message_with_a_parameter" Id="{e52eac1d-cb65-49b4-bc09-5d81f556beb4}">
      <Declaration><![CDATA[METHOD create_runner_message_with_a_parameter
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  parameter: REAL;
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Create runner message with a parameter');

sut.logging.add_logger(sut.logger);
parameter := 3.14;
sut.logging.parameter := F_REAL(parameter);
sut.logging.warning(message:='Test %1.2f');
cut_output := RIGHT(sut.logger.formatted_output, 21);

AssertEquals_STRING(' | Warning: Test 3.14', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="do_not_output_the_same_message_multiple_cycles_after_each_other" Id="{f2897511-5537-4810-89ea-d4903da56e20}">
      <Declaration><![CDATA[METHOD do_not_output_the_same_message_multiple_cycles_after_each_other
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
  state_counter: INT;
END_VAR
VAR
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Do not output the same message multiple cycles after each other');

sut.logging.add_logger(sut.logger);
sut.logging.run();

CASE state_counter OF
0:
  sut.logging.error(message:='Alarm');
  sut.logging.error(message:='Error');
  
  cut_output := RIGHT(sut.logger.formatted_output, 15);
  
  AssertEquals_DWORD(ADSLOG_MSGTYPE_ERROR, sut.logger.mask, '');
  AssertEquals_STRING(' | Error: ', sut.logger.prefix, '');
  AssertEquals_STRING(' | Error: Error', cut_output, '');
  
  state_counter := state_counter + 10;
10:
  // do not output this message
  sut.logging.error(message:='Alarm');
  
  cut_output := RIGHT(sut.logger.formatted_output, 15);
  
  AssertEquals_STRING(' | Error: Error', cut_output, '');
  state_counter := state_counter + 10;
20:
  // do not output this message
  sut.logging.error(message:='Alarm');
  
  cut_output := RIGHT(sut.logger.formatted_output, 15);
  
  AssertEquals_STRING(' | Error: Error', cut_output, '');
  state_counter := state_counter + 10;
30:
  // do not output this message
  sut.logging.error(message:='Alarm');
  
  cut_output := RIGHT(sut.logger.formatted_output, 15);
  
  AssertEquals_STRING(' | Error: Error', cut_output, '');
  
  TEST_FINISHED();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="submit_alarm" Id="{7203e8ee-f5fe-4e56-af12-ce30cf3bab16}">
      <Declaration><![CDATA[METHOD submit_alarm
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Submit alarm');

sut.logging.add_logger(sut.logger);
sut.event.message := 'Alarm';
sut.event.alarm();
cut_output := RIGHT(sut.logger.formatted_output, 15);

AssertEquals_DWORD(ADSLOG_MSGTYPE_ERROR, sut.logger.mask, '');
AssertEquals_STRING(' | Alarm: ', sut.logger.prefix, '');
AssertEquals_STRING(' | Alarm: Alarm', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="submit_error" Id="{7c89dd55-cac3-43cf-b229-89629492e809}">
      <Declaration><![CDATA[METHOD submit_error
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Submit error');

sut.logging.add_logger(sut.logger);
sut.event.message := 'Error';
sut.event.error();
cut_output := RIGHT(sut.logger.formatted_output, 15);

AssertEquals_DWORD(ADSLOG_MSGTYPE_ERROR, sut.logger.mask, '');
AssertEquals_STRING(' | Error: ', sut.logger.prefix, '');
AssertEquals_STRING(' | Error: Error', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="submit_info" Id="{bd81e84a-3e0d-47ff-97fa-d790029e78ab}">
      <Declaration><![CDATA[METHOD submit_info
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Submit info');

sut.logging.add_logger(sut.logger);
sut.event.message := 'Info';
sut.event.info();
cut_output := RIGHT(sut.logger.formatted_output, 13);

AssertEquals_DWORD(ADSLOG_MSGTYPE_HINT, sut.logger.mask, '');
AssertEquals_STRING(' | Info: ', sut.logger.prefix, '');
AssertEquals_STRING(' | Info: Info', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="submit_warning" Id="{d791f11d-b6d0-4afa-8f91-e5b068e59d16}">
      <Declaration><![CDATA[METHOD submit_warning
VAR_INPUT
END_VAR
VAR_INST
  sut: ADSLoggerTestsystem;
END_VAR
VAR
  cut_output: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Submit warning');

sut.logging.add_logger(sut.logger);
sut.event.message := 'Warning';
sut.event.warning();
cut_output := RIGHT(sut.logger.formatted_output, 19);

AssertEquals_DWORD(ADSLOG_MSGTYPE_WARN, sut.logger.mask, '');
AssertEquals_STRING(' | Warning: ', sut.logger.prefix, '');
AssertEquals_STRING(' | Warning: Warning', cut_output, '');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>